{"version":3,"sources":["firebase/config.js","hooks/useFirestore.js","comps/ImageGrid.js","comps/Modal.js","comps/Title.js","hooks/useStorage.js","comps/ProgressBar.js","comps/UploadForm.js","App.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","projectStorage","storage","projectFirestore","firestore","timestamp","FieldValue","serverTimestamp","useFirestore","collection","useState","docs","setDocs","useEffect","unsub","orderBy","onSnapshot","snap","documents","forEach","doc","push","data","id","ImageGrid","setSelectedImg","className","map","div","key","layout","whileHover","opacity","onClick","url","img","src","alt","intial","animate","transition","delay","Modal","selectedImg","e","target","classList","contains","initial","y","Title","useStorage","file","progress","setProgress","error","setError","setUrl","storageRef","ref","name","collectionRef","put","on","percentage","bytesTransferred","totalBytes","err","a","getDownloadURL","createdAt","add","ProgressBar","setFile","width","UploadForm","types","type","onChange","selected","files","includes","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.646840f4.chunk.js","sourcesContent":["import firebase from \"firebase/app\";\r\nimport 'firebase/storage';\r\nimport 'firebase/firestore';\r\n\r\n// Your web app's Firebase configuration\r\nvar firebaseConfig = {\r\n    apiKey: \"AIzaSyAaHj4UtVVQqJhYutKQZAIazwnY5qycfj8\",\r\n    authDomain: \"sebagram-e215d.firebaseapp.com\",\r\n    projectId: \"sebagram-e215d\",\r\n    storageBucket: \"sebagram-e215d.appspot.com\",\r\n    messagingSenderId: \"520368753558\",\r\n    appId: \"1:520368753558:web:5a182ea9bd138a36c26bb7\"\r\n};\r\n// Initialize Firebase\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst projectStorage = firebase.storage();\r\nconst projectFirestore = firebase.firestore();\r\nconst timestamp = firebase.firestore.FieldValue.serverTimestamp;\r\n\r\nexport { projectStorage, projectFirestore, timestamp };","import { useState, useEffect } from \"react\";\r\nimport { projectFirestore } from \"../firebase/config\";\r\n\r\nconst useFirestore = (collection) => {\r\n    const [docs, setDocs] = useState([]);\r\n\r\n    useEffect(() => {\r\n        const unsub = projectFirestore.collection(collection)\r\n            .orderBy(\"createdAt\", \"desc\")\r\n            .onSnapshot((snap) => {\r\n                let documents = [];\r\n                snap.forEach(doc => {\r\n                    documents.push({ ...doc.data(), id: doc.id });\r\n                });\r\n                setDocs(documents);\r\n            });\r\n\r\n        return () => unsub();\r\n    }, [collection])\r\n    return { docs };\r\n}\r\nexport default useFirestore;","import React from \"react\";\r\nimport useFirestore from \"../hooks/useFirestore\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ImageGrid = ({ setSelectedImg }) => {\r\n    const { docs } = useFirestore(\"images\");\r\n\r\n    return (\r\n        <div className=\"img-grid\">\r\n            { docs && docs.map(doc => (\r\n               <motion.div className=\"img-wrap\" key={doc.id}\r\n                    layout\r\n                    whileHover={{ opacity: 1 }}\r\n                    onClick={() => setSelectedImg(doc.url)}\r\n               >\r\n                   <motion.img src={doc.url} alt=\"uploaded picture\" \r\n                    intial={{ opacity: 0 }}\r\n                    animate={{ opacity: 1 }}\r\n                    transition={{ delay: 1 }}\r\n                   />\r\n                   </motion.div> \r\n            ))}\r\n        </div>\r\n    )\r\n}\r\nexport default ImageGrid;","import React from \"react\";\r\nimport { motion } from 'framer-motion';\r\n\r\nconst Modal = ({ selectedImg, setSelectedImg }) => {\r\n\r\n    const handleClick = (e) => {\r\n        if (e.target.classList.contains('backdrop')) {\r\n            setSelectedImg(null);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <motion.div className=\"backdrop\" onClick={handleClick}\r\n        initial={{ opacity: 0 }}\r\n        animate={{ opacity: 1 }}\r\n      >\r\n        <motion.img src={selectedImg} alt=\"enlarged pic\" \r\n          initial={{ y: \"-100vh\" }}\r\n          animate={{ y: 0 }}\r\n        />\r\n      </motion.div>\r\n    )\r\n}\r\nexport default Modal;","import React from 'react';\n\nconst Title = () => {\n  return (\n    <div className=\"title\">\n      <h1>SebaGram</h1>\n      <h2>Your Pictures</h2>\n      <p>Add Yours Favorite Pictures!!!</p>\n    </div>\n  )\n}\n\nexport default Title;","import { useState, useEffect } from \"react\";\r\nimport { projectStorage, projectFirestore, timestamp } from \"../firebase/config\";\r\n\r\nconst useStorage = (file) => {\r\n    const [progress, setProgress] = useState(0);\r\n    const [error, setError] = useState(null);\r\n    const [url, setUrl] = useState(null);\r\n\r\n    useEffect(() => {\r\n\r\n        const storageRef = projectStorage.ref(file.name);\r\n        const collectionRef = projectFirestore.collection('images');\r\n\r\n        storageRef.put(file).on(\"state_changed\", (snap) => {\r\n            let percentage = (snap.bytesTransferred / snap.totalBytes) * 100;\r\n            setProgress(percentage);\r\n        }, (err) => {\r\n            setError(err);\r\n        }, async () => {\r\n            const url = await storageRef.getDownloadURL();\r\n            const createdAt = timestamp();\r\n            collectionRef.add({ url, createdAt });\r\n            setUrl(url);\r\n        })\r\n    }, [file]);\r\n\r\n    return { progress, url, error }\r\n}\r\n\r\nexport default useStorage;","import React, { useEffect } from \"react\";\r\nimport useStorage from \"../hooks/useStorage\";\r\nimport { motion } from \"framer-motion\";\r\n\r\nconst ProgressBar = ({ file, setFile }) => {\r\n    const { url, progress } = useStorage(file);\r\n\r\n    useEffect(() => {\r\n        if (url) {\r\n            setFile(null);\r\n        }\r\n    }, [url, setFile])\r\n\r\n    return (\r\n        <motion.div className=\"progress-bar\"\r\n            initial={{ width: 0 }}\r\n            animate={{ width: progress + '%'}}\r\n        ></motion.div>\r\n    )\r\n}\r\n\r\nexport default ProgressBar;","import React, { useState } from \"react\";\r\nimport ProgressBar from \"./ProgressBar\";\r\n\r\nconst UploadForm = () => {\r\n    const [file, setFile] = useState(null);\r\n    const [error, setError] = useState(null);\r\n\r\n    const types = ['image/png', 'image/jpg', 'image/jpeg'];\r\n\r\n    const changeHandler = (e) => {\r\n        let selected = e.target.files[0];\r\n\r\n        if (selected && types.includes(selected.type)) {\r\n            setFile(selected);\r\n            setError('');\r\n        } else {\r\n            setFile(null);\r\n            setError('Please select an image file (png or jpeg)');\r\n        }\r\n    }\r\n    return (\r\n        <form>\r\n            <label>\r\n            <input type=\"file\" onChange={changeHandler} />\r\n                <span>+</span>\r\n            </label>\r\n            <div className=\"output\">\r\n                {error && <div className=\"error\">{error}</div>}\r\n                {file && <div>{file.name}</div>}\r\n                {file && <ProgressBar file={file} setFile={setFile} />}\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default UploadForm;","import React, { useState } from 'react';\nimport ImageGrid from './comps/ImageGrid';\nimport Modal from './comps/Modal';\nimport Title from './comps/Title';\nimport UploadForm from './comps/UploadForm';\n\nfunction App() {\n  const [selectedImg, setSelectedImg] = useState(null);\n\n  return (\n    <div className=\"App\">\n      <Title/>\n      <UploadForm />\n      <ImageGrid setSelectedImg={setSelectedImg}/>\n      { selectedImg && <Modal selectedImg={selectedImg} setSelectedImg={setSelectedImg} /> }\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA"],"sourceRoot":""}